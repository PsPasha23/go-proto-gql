{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 There are three ways to use this library: Using the protoc tool and extending it with plugins to generate graphql schema and golang bindings. Generating the graphql schema using proto2graphql (use this if you don't want to install protoc ) Configuring a gateway that will translate the messages from one protocol to other on the fly. For more examples check: example","title":"Getting Started"},{"location":"#getting-started","text":"There are three ways to use this library: Using the protoc tool and extending it with plugins to generate graphql schema and golang bindings. Generating the graphql schema using proto2graphql (use this if you don't want to install protoc ) Configuring a gateway that will translate the messages from one protocol to other on the fly. For more examples check: example","title":"Getting Started"},{"location":"1.protoc-gen-gql/","text":"Plugin protoc-gen-gql \u00b6 protoc-gen-gql plugin will generate graphql files with extension .graphqls rather than go code which means it can be further used for any other language or framework. The GraphQL objects will only be generated for the gRPC messages of other types that are used in a service either as a input value or a return value (For details check #1) Install \u00b6 go install github.com/danielvladco/go-proto-gql/protoc-gen-gql@latest The protoc compiler expects to find plugins named proto-gen-<PLUGIN_NAME> on the execution $PATH . So first add golang bin directory to the path if it's not already added (also add it to .zshrc or ~/.bash_profile depending on the OS you use): export PATH = ${ PATH } : $( go env GOPATH ) /bin Usage \u00b6 Run the protoc command with the arguments for the installed plugin: Like this: protoc --gql_out = <ADDITIONAL_ARGUMENTS>:<PATH> -I = ./api -I = . ./example/codegen/api/pb/*.proto Where ADDITIONAL_ARGUMENTS may be provided in the form of key=value separated by a comma. Possible additional arguments: - svc bool - Use service annotations for nodes corresponding to a GRPC call. - merge bool - Merge all the proto files found in one directory into one graphql file. - ext string - Extension of the graphql file, Default: '.graphql' (default \"graphql\"). Example \u00b6 protoc --gql_out = svc = true:. -I = ./api -I = . ./example/codegen/api/pb/*.proto","title":"Plugin protoc-gen-gql"},{"location":"1.protoc-gen-gql/#plugin-protoc-gen-gql","text":"protoc-gen-gql plugin will generate graphql files with extension .graphqls rather than go code which means it can be further used for any other language or framework. The GraphQL objects will only be generated for the gRPC messages of other types that are used in a service either as a input value or a return value (For details check #1)","title":"Plugin protoc-gen-gql"},{"location":"1.protoc-gen-gql/#install","text":"go install github.com/danielvladco/go-proto-gql/protoc-gen-gql@latest The protoc compiler expects to find plugins named proto-gen-<PLUGIN_NAME> on the execution $PATH . So first add golang bin directory to the path if it's not already added (also add it to .zshrc or ~/.bash_profile depending on the OS you use): export PATH = ${ PATH } : $( go env GOPATH ) /bin","title":"Install"},{"location":"1.protoc-gen-gql/#usage","text":"Run the protoc command with the arguments for the installed plugin: Like this: protoc --gql_out = <ADDITIONAL_ARGUMENTS>:<PATH> -I = ./api -I = . ./example/codegen/api/pb/*.proto Where ADDITIONAL_ARGUMENTS may be provided in the form of key=value separated by a comma. Possible additional arguments: - svc bool - Use service annotations for nodes corresponding to a GRPC call. - merge bool - Merge all the proto files found in one directory into one graphql file. - ext string - Extension of the graphql file, Default: '.graphql' (default \"graphql\").","title":"Usage"},{"location":"1.protoc-gen-gql/#example","text":"protoc --gql_out = svc = true:. -I = ./api -I = . ./example/codegen/api/pb/*.proto","title":"Example"},{"location":"2.protoc-gen-gogql/","text":"Plugin protoc-gen-gogql \u00b6 If you still want to generate go source code instead of graphql then use http://github.com/99designs/gqlgen plugin, and map all the generated go types with all the generated graphql types. protoc-gen-gogql plugin generates methods for implementing github.com/99designs/gqlgen/graphql.Marshaler and github.com/99designs/gqlgen/graphql.Unmarshaler interfaces. Now proto enum s, oneof s and map s will work fine with graphql. This plugin also creates convenience methods that will implement generated by the gqlgen MutationResolver and QueryResolver interfaces. Install \u00b6 go install github.com/danielvladco/go-proto-gql/protoc-gen-gogql@latest The protoc compiler expects to find plugins named proto-gen-<PLUGIN_NAME> on the execution $PATH . So first add golang bin directory to the path if it's not already added (also add it to .zshrc or ~/.bash_profile depending on the OS you use): export PATH = ${ PATH } : $( go env GOPATH ) /bin Usage \u00b6 Run the protoc command with the arguments for the installed plugin: Like this: protoc --gql_out = <ADDITIONAL_ARGUMENTS>:<PATH> -I = ./api -I = . ./example/codegen/api/pb/*.proto Where ADDITIONAL_ARGUMENTS may be provided in the form of key=value separated by a comma. Possible additional arguments: - svc bool - Use service annotations for nodes corresponding to a GRPC call. - merge bool - Merge all the proto files found in one directory into one file. Example \u00b6 protoc --gogql_out = paths = source_relative:. -I = ./api -I = . ./example/codegen/api/pb/*.proto","title":"Plugin protoc-gen-gogql"},{"location":"2.protoc-gen-gogql/#plugin-protoc-gen-gogql","text":"If you still want to generate go source code instead of graphql then use http://github.com/99designs/gqlgen plugin, and map all the generated go types with all the generated graphql types. protoc-gen-gogql plugin generates methods for implementing github.com/99designs/gqlgen/graphql.Marshaler and github.com/99designs/gqlgen/graphql.Unmarshaler interfaces. Now proto enum s, oneof s and map s will work fine with graphql. This plugin also creates convenience methods that will implement generated by the gqlgen MutationResolver and QueryResolver interfaces.","title":"Plugin protoc-gen-gogql"},{"location":"2.protoc-gen-gogql/#install","text":"go install github.com/danielvladco/go-proto-gql/protoc-gen-gogql@latest The protoc compiler expects to find plugins named proto-gen-<PLUGIN_NAME> on the execution $PATH . So first add golang bin directory to the path if it's not already added (also add it to .zshrc or ~/.bash_profile depending on the OS you use): export PATH = ${ PATH } : $( go env GOPATH ) /bin","title":"Install"},{"location":"2.protoc-gen-gogql/#usage","text":"Run the protoc command with the arguments for the installed plugin: Like this: protoc --gql_out = <ADDITIONAL_ARGUMENTS>:<PATH> -I = ./api -I = . ./example/codegen/api/pb/*.proto Where ADDITIONAL_ARGUMENTS may be provided in the form of key=value separated by a comma. Possible additional arguments: - svc bool - Use service annotations for nodes corresponding to a GRPC call. - merge bool - Merge all the proto files found in one directory into one file.","title":"Usage"},{"location":"2.protoc-gen-gogql/#example","text":"protoc --gogql_out = paths = source_relative:. -I = ./api -I = . ./example/codegen/api/pb/*.proto","title":"Example"},{"location":"3.proto2graphql/","text":"CLI tool proto2graphql \u00b6 proto2graphql is similar to protoc-gen-gql except it doesn't require protoc binary to run and therefore is much simpler ro use The GraphQL objects will only be generated for the gRPC messages of other types that are used in a service either as a input value or a return value (For details check #1) Install \u00b6 go install github.com/danielvladco/go-proto-gql/cmd/proto2graphql@latest Usage \u00b6 Usage of proto2graphql: - -I string - Specify the directory in which to search for imports. May be specified multiple times. May be specified multiple times. - -f string - Parse proto files and generate graphql based on the options given. May be specified multiple times. - -ext string - Extension of the graphql file, Default: '.graphql' (default \"graphql\"). - -merge - Merge all the proto files found in one directory into one graphql file. - -svc - Use service annotations for nodes corresponding to a GRPC call.","title":"CLI tool proto2graphql"},{"location":"3.proto2graphql/#cli-tool-proto2graphql","text":"proto2graphql is similar to protoc-gen-gql except it doesn't require protoc binary to run and therefore is much simpler ro use The GraphQL objects will only be generated for the gRPC messages of other types that are used in a service either as a input value or a return value (For details check #1)","title":"CLI tool proto2graphql"},{"location":"3.proto2graphql/#install","text":"go install github.com/danielvladco/go-proto-gql/cmd/proto2graphql@latest","title":"Install"},{"location":"3.proto2graphql/#usage","text":"Usage of proto2graphql: - -I string - Specify the directory in which to search for imports. May be specified multiple times. May be specified multiple times. - -f string - Parse proto files and generate graphql based on the options given. May be specified multiple times. - -ext string - Extension of the graphql file, Default: '.graphql' (default \"graphql\"). - -merge - Merge all the proto files found in one directory into one graphql file. - -svc - Use service annotations for nodes corresponding to a GRPC call.","title":"Usage"},{"location":"4.gateway/","text":"Gateway (PoC) \u00b6 At this point we have a PoC gateway that will translate the messages on the fly. The gateway can be configured in two modes: pointing to a list of grpc endpoints (grpc reflection must be enabled on the grpc servers). The gateway will query the servers for protobuf descriptors and generate a graphql schema abstract tree. The requests to the gateway will be transformed on the fly to grpc servers without any additional code generation or writing any code at all. See examples/gateway for usage more info. Config the gateway \u00b6 To configure the gateway create a config.yaml file and provide it to our gateway executable via --config flag. For example: ./gateway --config config.yaml Gateway config options: # Generate documentation from the comments left in proto files docs : true # Cors configuration for more details check https://github.com/rs/cors/blob/master/cors.go#L32 cors : { } # The address to serve the gateway on (Default :8080) address : \":8080\" # Start the gateway with TLS tls : # Path to the TLS certificate certificate : \"\" # Path to the TLS private key private_key : \"\" # gRPC config options (It is made as a separate category because in the future we can add other protocols too, # such as: OpenAPI, OpenRPC, GraphQL, etc. grpc : # Import paths provided to the proto parser it is similar to `-I` or `--proto_path` flag on `protoc` cli tool. # It is required if your services import proto files. import_paths : - ./api services : # The gRPC server address - address : \"localhost:8081\" # Authentication options to connect to the gRPC server if needed, otherwise will use insecure connection. authentication : # Authenticate using TLC tls : # Path to the TLS certificate certificate : \"\" # Path to the TLS private key private_key : \"\" # Enable automatic discovery if the gRPC server has enabled reflection. # Cannot be used together with `proto_files` option. reflection : true # The entry proto file where the gRPC services are defined. # If your proto files have any dependencies they should be present in one of the specified `import_paths` proto_files : - ./grpc_service.proto Docker image \u00b6 A docker image with the gateway is also available with the latest tags: To run the gateway using docker run: docker run ghcr.io/danielvladco/go-proto-gql/gateway Example \u00b6 In this example we will spin up two gRPC servers and a gateway server that points to them. To run the demo example follow the next steps: Go to ./example/gateway/ Run docker-compose up Navigate to http://localhost:8080/playground in your browser Have fun sending requests to the gRPC servers directly from your browser! Supported features \u00b6 Run with TLS certificates Cors GRPC authentication TLS authentication GRPC other authentication methods (more research required) GRPC reflection Proto files parsing Adapt gRPC to GraphQL GRPC call to Mutation GRPC call to Query GRPC stream to Subscription Proto messages to GraphQL types Proto messages to GraphQL inputs Proto enums to GraphQL enums Proto maps to GraphQL array of types for map entries Proto maps to GraphQL array of inputs for map entries Proto oneofs to GraphQL unions Proto oneofs to GraphQL directive attached to the fields that must be unique Adapt OpenAPI to GraphQL #45 Adapt OpenRPC to GraphQL #46 Proxy GraphQL to GraphQL #47","title":"Gateway (PoC)"},{"location":"4.gateway/#gateway-poc","text":"At this point we have a PoC gateway that will translate the messages on the fly. The gateway can be configured in two modes: pointing to a list of grpc endpoints (grpc reflection must be enabled on the grpc servers). The gateway will query the servers for protobuf descriptors and generate a graphql schema abstract tree. The requests to the gateway will be transformed on the fly to grpc servers without any additional code generation or writing any code at all. See examples/gateway for usage more info.","title":"Gateway (PoC)"},{"location":"4.gateway/#config-the-gateway","text":"To configure the gateway create a config.yaml file and provide it to our gateway executable via --config flag. For example: ./gateway --config config.yaml Gateway config options: # Generate documentation from the comments left in proto files docs : true # Cors configuration for more details check https://github.com/rs/cors/blob/master/cors.go#L32 cors : { } # The address to serve the gateway on (Default :8080) address : \":8080\" # Start the gateway with TLS tls : # Path to the TLS certificate certificate : \"\" # Path to the TLS private key private_key : \"\" # gRPC config options (It is made as a separate category because in the future we can add other protocols too, # such as: OpenAPI, OpenRPC, GraphQL, etc. grpc : # Import paths provided to the proto parser it is similar to `-I` or `--proto_path` flag on `protoc` cli tool. # It is required if your services import proto files. import_paths : - ./api services : # The gRPC server address - address : \"localhost:8081\" # Authentication options to connect to the gRPC server if needed, otherwise will use insecure connection. authentication : # Authenticate using TLC tls : # Path to the TLS certificate certificate : \"\" # Path to the TLS private key private_key : \"\" # Enable automatic discovery if the gRPC server has enabled reflection. # Cannot be used together with `proto_files` option. reflection : true # The entry proto file where the gRPC services are defined. # If your proto files have any dependencies they should be present in one of the specified `import_paths` proto_files : - ./grpc_service.proto","title":"Config the gateway"},{"location":"4.gateway/#docker-image","text":"A docker image with the gateway is also available with the latest tags: To run the gateway using docker run: docker run ghcr.io/danielvladco/go-proto-gql/gateway","title":"Docker image"},{"location":"4.gateway/#example","text":"In this example we will spin up two gRPC servers and a gateway server that points to them. To run the demo example follow the next steps: Go to ./example/gateway/ Run docker-compose up Navigate to http://localhost:8080/playground in your browser Have fun sending requests to the gRPC servers directly from your browser!","title":"Example"},{"location":"4.gateway/#supported-features","text":"Run with TLS certificates Cors GRPC authentication TLS authentication GRPC other authentication methods (more research required) GRPC reflection Proto files parsing Adapt gRPC to GraphQL GRPC call to Mutation GRPC call to Query GRPC stream to Subscription Proto messages to GraphQL types Proto messages to GraphQL inputs Proto enums to GraphQL enums Proto maps to GraphQL array of types for map entries Proto maps to GraphQL array of inputs for map entries Proto oneofs to GraphQL unions Proto oneofs to GraphQL directive attached to the fields that must be unique Adapt OpenAPI to GraphQL #45 Adapt OpenRPC to GraphQL #46 Proxy GraphQL to GraphQL #47","title":"Supported features"}]}